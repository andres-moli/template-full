import { ConfigType } from '@nestjs/config';
import { Repository } from 'typeorm';
import { CreateUserInput } from '../dto/inputs/create-user.input';
import { UpdateUserInput } from '../dto/inputs/update-user.input';
import { User } from '../entities/user.entity';
import { FindUserArgs } from '../dto/args/find-users.args';
import { CodeConfirmationInput } from '../dto/inputs/code-confirmation.input';
import { UserDocumentTypes } from '../../../common/enum/document-type.enum';
import { RecoverPasswordInput } from '../dto/inputs/recover-password.input';
import { JwtService } from '@nestjs/jwt';
import { UpdatePasswordInput } from '../dto/inputs/update-password.input';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { UpdateUserInformationInput } from '../dto/inputs/update-user-information.input';
import { UpdateUserPasswordInput } from '../dto/inputs/update-user-password.input';
import { DoubleVerificationInput } from '../dto/inputs/double-verification.input';
import { CodeRecoverPasswordInput } from '../dto/inputs/code-recover-password.input';
import { config } from '../../../config';
import { IContext } from '../../../patterns/crud-pattern/interfaces/context.interface';
import { SignupEmailInput } from '../../auth/dto';
import { AddAndRemoveRoleInput } from '../dto/inputs/add-and-remove-role.input';
import { Role } from '../../roles/entities/role.entity';
import { RoleFx } from '../../roles/entities/role-fx.entity';
export declare const serviceStructure: import("../../../patterns/crud-pattern/interfaces/structures/crud-service-structure.interface").ICrudServiceStructure<unknown, User, CreateUserInput, UpdateUserInput, FindUserArgs, IContext>;
declare const UsersService_base: import("@nestjs/common").Type<import("../../../patterns/crud-pattern/interfaces/crud-service.interface").ICrudService<unknown, User, CreateUserInput, UpdateUserInput, FindUserArgs, IContext>>;
export declare class UsersService extends UsersService_base {
    private readonly configService;
    private readonly jwtService;
    private readonly eventEmitter;
    constructor(configService: ConfigType<typeof config>, jwtService: JwtService, eventEmitter: EventEmitter2);
    private hash;
    private checkUserPassword;
    private checkPasswordConfirm;
    resetSuperAdmin(context: IContext): Promise<User>;
    partialCreation(context: IContext, createInput: SignupEmailInput): Promise<User>;
    beforeCreate(context: IContext, repository: Repository<User>, entity: User, createInput: CreateUserInput): Promise<void>;
    beforeUpdate(context: IContext, repository: Repository<User>, entity: User, updateInput: UpdateUserInput): Promise<void>;
    beforeRemove(context: IContext, repository: Repository<User>, entity: User): Promise<void>;
    findOneByEmail(context: IContext, email: string, orFail?: boolean): Promise<User>;
    findOneById(context: IContext, id: string, orFail?: boolean): Promise<User>;
    findOneByIdentificationNumber(context: IContext, identificationNumber: string, identificationType: UserDocumentTypes, orFail?: boolean): Promise<User>;
    findActivityNowUser(context: IContext, id: string): Promise<boolean>;
    findOneByIdentificationNumberOrEmail(context: IContext, identificationNumber: string, email: string, orFail?: boolean): Promise<User>;
    codeConfirmation(context: IContext, codeConfirmationInput: CodeConfirmationInput): Promise<User>;
    recoverPassword(context: IContext, passwordRecoveryInput: RecoverPasswordInput): Promise<string>;
    updatePassword(context: IContext, updatePasswordInput: UpdatePasswordInput): Promise<User>;
    hasFunctionality(context: IContext, key: string, userId: string): Promise<boolean>;
    findUserAndRole(context: IContext, addAndRemoveRoleInput: AddAndRemoveRoleInput): Promise<{
        user: User;
        role: any;
    }>;
    addUserRole(context: IContext, addAndRemoveRoleInput: AddAndRemoveRoleInput): Promise<User>;
    removeUserRole(context: IContext, addAndRemoveRoleInput: AddAndRemoveRoleInput): Promise<User>;
    userRoles(context: IContext, user: User): Promise<Role[]>;
    userRolesFx(context: IContext, user: User): Promise<RoleFx[]>;
    updateUserInformation(context: IContext, updateUserInformationInput: UpdateUserInformationInput): Promise<User>;
    updateUserPassword(context: IContext, updateUserPasswordInput: UpdateUserPasswordInput): Promise<User>;
    resetPassword(context: IContext, password: string): Promise<User>;
    enableAndDisableDoubleVerification(context: IContext, doubleVerificationInput: DoubleVerificationInput): Promise<string>;
    fullName(context: IContext, user: User): Promise<string>;
    codeRecoverPassword(context: IContext, codeRecoverPasswordInput: CodeRecoverPasswordInput): Promise<string>;
}
export {};
